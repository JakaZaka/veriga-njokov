#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('vaja3:server');
var http = require('http');
const {Server} = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: true, // Allow all origins for simplicity, adjust as needed
    methods: ['GET', 'POST'],
    credentials: true, // Allow credentials to be sent
  }
});

const connectedUsers = new Map();

io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  // Handle user loging in
  socket.on('login', (userId) => {
    connectedUsers.set(userId, socket.id);
    console.log(`User ${userId} logged in with socket ID ${socket.id}`);
  });

   /*setTimeout(() => {
    io.to(socket.id).emit('clothingItemTransferred', {
      id: '123',
      name: 'Test Jacket',
      description: 'A nice test jacket',
    });
  }, 5000);*/

  // Handle user disconnecting
  socket.on('logout', () => {
    console.log('A user disconnected:', socket.id);
    // Remove the user from the connected users map
    for (let [userId, id] of connectedUsers.entries()) {
      if (id === socket.id) {
        connectedUsers.delete(userId);
        console.log(`User ${userId} disconnected`);
        break;
      }
    }
    console.log('User disconnected:', socket.id);
  });
});

app.set('io', io); // Make io available in the app
app.set('connectedUsers', connectedUsers); // Make connectedUsers available in the app

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {console.log(`Server running on port ${port}`)});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
